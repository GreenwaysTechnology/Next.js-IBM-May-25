				GraphQL
....................................................................................
What is GraphQL?
	GraphQL is a "new API" standard that provides a more efficient, powerful and flexible alternative to REST.

API: Application Programming interface
......................................

API means a method or function.
method or function get input and return something, sometimes it may not.
method represents biz logic - computation,reading,writing,removing,modifiying

How apis are encapsulated?

 In object oriented programming, apis are grouped into "Objects" or classes.

In oop, object communicates each other.one object calls method of other object 
 "To get data"/to send data.

Types of api:
.............
 types of api are classified based on their representation

if apis are with in single process/runtime

 "Local Api"

class order{

}
class customer{
   private Order order

  getOrders(){
     order.getOrder()
  }
}
if two methods are communicated which are encapsulated within single runtime - local apis.


if apis are communicating across the runtime either with in same machine, or same network or internet

"Remote apis"
....................................................................................
				RPI -Remote Procedure Invocation
....................................................................................

RPI Technologies:

1.c based rpi - first rpi
2.corba - common object request broker arch
3.rmi - remote method invocation - pure java technologies
3.web services


Web Services:
 
 Based on internet rpi technologies

client(can be any program any language)---talks to remote program called server--via http protocol---(web containter)-hosts program

Types of webservice

1.soap - xml based
2.rest  - data independent
 
HTTP based api - Web service:
.............................
 rest api

RPC based api technologies

 "grpc" is another api technologies
...................................................................................
			
Modern api technologies:

1.REST API
2.Grpc API
3.Graphql API
....................................................................................
				History of GraphQL or Why GraphQL
....................................................................................

Rest spec is based on spec called REST spec
https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm


REST:
   REST has not been designed to be 'user centric' rather than data centric...

User:
  User means biz or domain.

if you define any api, which returns data set eg: if you query an api called products

products may have so many fields, i dont want all fields which exposed by the api...

GET  /api/products

 =>[{
  ...
 }]

Since REST not able to solve all types of user biz requirements, Facebook was looking another solution to get data based "user centric" not based on "data centric"


		         The birth of GraphQL
.....................................................................................

At its core, GraphQL enables "declarative data fetching" where a client can specify exactly what data it needs from an API.

 "Instead of multiple endpoints that return fixed data structures", a GraphQL server only exposes a single endpoint and responds with precisely the data a client asked for.

 GraphQL one End Point for "Enter domain", Each Domain has its own CURD operations



				     |-------Product -Read,Save,Update,Delete
				     |-------Customer-Read,Save,Update,Delete
  Client-------Single Endpoint ------|-------Payment-Read,Save,Update,Delete
				     |-------Inventory-Read,Save,Update,Delete
	

REST endpoints:

GET /api/products
POST /api/products
PUT /api/products/id
DELETE /api/products/id

GET /api/customers
POST /api/customers
PUT /api/customers/id
DELETE /api/customers/id


.....................................................................................
		   Request and Response Model in REST

http
 GET   /api/customers-----------> REST server
            <-------JSON/XML/PDF/etc....


 POST   /api/customers-----------> REST server
            <-------JSON/XML/PDF/etc....

.....................................................................................	
 	      	Request and Response Model in GraphQL

http
POST   /graphql-----------> GraphQL server
            <-------JSON

....................................................................................
 			How to begin with GraphQL
...................................................................................

GraphQL is platform and language independent.

GraphQL Can be classified into two category

1.Client side - How to send data(Request) to the GraphQL server.
  in order to send data from the client face book published one spec called
   "GraphQL Query language spec"

2.Server side - How to build graph(object tree) from the data sources
    "GraphQL Schema language spec"

.....................................................................................	
		   GraphQL request and response model.

Declarative Programming:

What you write, you have to get the same structure.

The Query request is more readable, declarative.  Which  mimics the JavaScript object literal syntax.

js object:

 let user =  {
     id:1,
     name:'joe'
     friends: [
        'bar','foo'
     ]
  } 


GraphQL basic request structure

GraphQL Request payload : GraphQL Query
.............................................................

GraphQL Client 

POST /endpoint


  {
     id
     name
     friends {  ----------------------------->GraphQL Server
        name
     }
  } 

Response: JSON
 {
     "id":1,
     "name":"joe"
     "friends": [      <----------------------------- GraphQLAPIServer
        "bar","foo"
     ]
  } 
..............................................................................................
				 REST AND CURD

Operations Type

GET ------Read
POST -----CREATE
PUT ------UPDATE
DELETE----Remove
.....................................................................................
		          GRAPHQL And CURD


GraphQL uses only URL which exposes Service


  {
     id
     name
     friends { -----------HTTP POST------------------> GraphQLServer
        name
     }
  } 

Since we have only one end point, how to Identify the different operations like create, read ,update ,delete.

Thats where graphql offers "client language called GraphQL Query language"........

GraphQL language offers syntax.


Operation Types:

1.Query
  read
2.mutation
  create, update, delete
3.subscription
   Streaming

query - a read only fetch
mutation- a write followed by read
subscription- a long live request that fetches data in response to source events
....................................................................................
                 GraphQL Query language specification
.....................................................................................

Concepts:

=>Query encapsulation
=>Query header
=>Query api
=>fields
=>arguments
=>aliases
=>fragments
=>variables
=>directives
=>mutations
=>inline fragments

if you want to learn query language we need api.
i am going to use mock apis.

https://countries.trevorblades.com/

Client tools:

1.post man
2.online browser based tool.
 https://studio.apollographql.com/sandbox/explorer

We are going to use "Apollo GraphQL" online tool.

We are going to use "Apollographql" online tool.


GraphQL query language has syntax:

1.Selection Set

  selectionSet  {Selection} => Query Encapsulation.

selectionSet could be "query, mutation, subscription"

 query  {Selection}
  or
 mutation  {Selection}
  or
 subscription  {Selection}

Selection:

 apiname (method)
    returns
     -fields
     -fragment spread
     -inline fragment

syntax
  api {
    field1
    fiedl2
    field3
  }

Full eg with selection set

query {
 api {
    field1
    fiedl2  --------------------->Server------response-json
    field3
 }
 }

selection set is "query" - to read 
api - name of the method
fields means the data variables

Operation and Selection Set

//read =>GET
query {
person{
  firstname
  lastname
  age
 }
}

//Write
mutation createUser(params){
  createuser(params) {
     id
     name
  }
}
//streaming
subscription getPriceQuote(params) {
 getPrice(params) {
   price
   name
 }
 
}
................................................................................

Use Case: Simple Query

# Request
query {
  countries {
    name
  }
}


Response:
{
  "data": {
    "countries": [
      {
    
        "name": "Andorra"
      },
      {
      
        "name": "United Arab Emirates"
      },
      {
        
        "name": "Afghanistan"
      },
     
    ]
  }
}
.................

More fields:
............

Use case :How to request more fields

# Request
query {
  countries {
    name
    code 
    capital
    currency
    emoji
    
  }
}
Response:

{
  "data": {
    "countries": [
      {
        "name": "Andorra",
        "code": "AD",
        "capital": "Andorra la Vella",
        "currency": "EUR",
        "emoji": "ðŸ‡¦ðŸ‡©"
      },
      {
        "name": "United Arab Emirates",
        "code": "AE",
        "capital": "Abu Dhabi",
        "currency": "AED",
        "emoji": "ðŸ‡¦ðŸ‡ª"
      },
  ]
 }
}
....................................................................................
			    Query Syntax
...................................................................................

1.with query  keyword
query {
  countries {
    name
    code 
    capital
    currency
    emoji
    
  }
}
2.without query keyword
# Request
{
  countries {
    name
    code
    capital
    currency
    emoji
  }
}

3.Query with "Header" - Query Header

 Query header is just dummy name to idenfity the type of query.
 This looks like "methodName",
 Which can any name.

# Request
query GETCounterInfo {
  countries {
    name
    code
    capital
    currency
    emoji
  }
}
.....................................................................................
			Nested Fields
.....................................................................................

REST:

GET	/posts
GET	/posts/1
GET	/posts/1/comments

Here comments is nested data structure.

Use case: Query can ask nested data.

# Request
query GETCounteryInfo {
  countries {
    name
    code
    capital
    currency
    emoji
    states {
      code
      name
    }
  }
}
Response:
"data": {
    "countries": [
      {
        "name": "Andorra",
        "code": "AD",
        "capital": "Andorra la Vella",
        "currency": "EUR",
        "emoji": "ðŸ‡¦ðŸ‡©",
        "states": []
      },
      {
        "name": "United Arab Emirates",
        "code": "AE",
        "capital": "Abu Dhabi",
        "currency": "AED",
        "emoji": "ðŸ‡¦ðŸ‡ª",
        "states": []
      }
   }
}
  ....................................................................................
			Args and parameters
.....................................................................................

What if i want to get data based on some condition or conditions

Parameters can be either hardcoded or dynamic parameter

Syntax:
query getUser { 
     user(variableName:value) {
	fields
     }
}

Hardcoded or static parameter
.............................
eg:
query CountryByCode {
   country(code:"IN"){
     capital
     name
     currency
   }
}

Response:
{
  "data": {
    "country": {
      "capital": "New Delhi",
      "name": "India",
      "currency": "INR"
    }
  }
}
.....................................................................................	
				  Dynamic parameters
....................................................................................

Variables:
 Variables are place holder to have dynamic values which are passed from outside.
in case of client app, you can pass via programs.

How to use variables?
  Variables are used with "$VariableName" convention.

Steps:
1.Declare variable with data type as part of the query header


Syntax:
 query queryHeader($variableName:DataType){
    apiName(variableName:$variableName){
     fields
   }
 }

Data Types:
 GraphQL provides language independent data types.

Data Types:
Scalar types(primitives)
 ID
 String
 Float
 Int
 Enum
 Boolean

Complex Types(Object Types)
 Objects-Customer,Country,Continent
 Input- Special complex type-Primarily for passing complex input which is eq to dto

EG:
query CountryByCode($code:ID!) {
   country(code:$code){
     capital
     name
     currency
   }
}

variables:
{
  "code": "US"
}
Response:
{
  "data": {
    "country": {
      "capital": "Washington D.C.",
      "name": "United States",
      "currency": "USD,USN,USS"
    }
  }
}
....................................................................................
How to pass complex types or input types?

query:
query GETLANGUAGE_INFO($filter:LanguageFilterInput) {
   languages(filter:$filter){
     code 
     name
   }
}
variables:
{
  "filter": {
    "code": {
      "eq": "en"
    }
  }
}
{
  "data": {
    "languages": [
      {
        "code": "en",
        "name": "English"
      }
    ]
  }
}